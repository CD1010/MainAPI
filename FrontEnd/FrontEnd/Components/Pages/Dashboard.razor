@page "/dashboard"
@attribute [StreamRendering]
@inject IAuthClientHelper helper
@inject IConfiguration configuration

@using Shared
@using Shared.Models
@using System.Text.Json

<PageTitle>Dashboard</PageTitle>

<div class="dashboard-container">
    <h1>Dashboard</h1>

    <p>This component demonstrates showing data.</p>


        <div class="grid-container">
            <h2>Customers</h2>
            <CustomerGrid customers="@customersOrdersResponse?.Customers"></CustomerGrid>
        </div>

        <div class="grid-container">
            <h2>Orders</h2>
            <OrderGrid orders="@customersOrdersResponse?.Orders"></OrderGrid>
        </div>
    
</div>

<style>
    .dashboard-container {
        padding: 20px;
    }

    .grid-container {
        margin-bottom: 30px;
    }

    .error-message {
        color: red;
        font-weight: bold;
        margin-bottom: 20px;
    }

    ::deep .fluent-data-grid {
        height: auto;
        overflow-y: auto;
    }
</style>

@code {
    private CustomersOrdersResponse customersOrdersResponse;
    private string? errorMessage;

    private HttpClient GetClient()
    {
        var apiKey = configuration["ApiKey"];
        if (string.IsNullOrEmpty(apiKey))
        {
            throw new InvalidOperationException("API Key is not configured.");
        }

        return helper.GetAuthorizedHttpClient(apiKey);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var client = GetClient();

            HttpRequestMessage request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri("https://localhost:7192/Main"),
            };

            HttpResponseMessage response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();

            string contentStream = await response.Content.ReadAsStringAsync();

            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

            customersOrdersResponse = JsonSerializer.Deserialize<CustomersOrdersResponse>(contentStream, options);

            if (customersOrdersResponse == null)
            {
                errorMessage = "No data were returned from the API.";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Error fetching data: {ex.Message}";
        }
        catch (JsonException ex)
        {
            errorMessage = $"Error parsing response: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
        }
    }
}
